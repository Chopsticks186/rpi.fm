#!/usr/bin/perl
# Copyright: SZABO Gergely <szg@subogero.com>, GNU GPL v2
use Term::ANSIColor qw(:constants);
use Data::Dumper;
use integer;
sub getstation; sub getgenre; sub loadgenres; sub cols;
sub mystation; sub myload; sub mysave; sub choosestation; sub player;
sub logger;
sub help {
    print <<EOF;
Available commands:
q	Radio off and Quit		f	Featured stations list
d	leave raDio on and quit		g	choose Genre
?	help				l	List actual stations
h	change to HDMI output		H	play now on HDMI
j	change to stereo Jack output	J	play now on Jack
i	insert to playlist		I	play now
a	Add to playlist after current	A	Add to end of playlist
p	Play/Pause			s	Show what's playing
m	My stations
EOF
}

if ($ARGV[0] =~ /-h/) {
    help;
    exit 0;
}
print STDERR <<EOF;
Welcome to rpi.fm - Type ? for help
===================================
EOF

our %my;
our @stations;
our %genres;
our $genre;
our $title;
our $station_now;
our $cols = cols;

myload;
print STDERR BRIGHT_RED, "rpi.fm> ", RESET;
while (<>) {
    (my $cmd = $_) =~ s/\r|\n//g;
    if      ($cmd eq 'q') {
        my $state = `omxd S`;
        player 'p' if $state =~ /Playing/;
        mysave;
    } elsif ($cmd eq 'd') {
        mysave;
    } elsif ($cmd eq '?') {
        help;
    } elsif ($cmd eq 'm') {
        mystation;
    } elsif ($cmd eq 'f') {
        $genre = '';
        getstation;
    } elsif ($cmd eq 'l') {
        getstation;
    } elsif ($cmd eq 'g') {
        getgenre;
    } elsif ($cmd =~ /[HJiIaA]/ && $station_now) {
        player $cmd, $station_now;
    } elsif ($cmd =~ /[hjp]/) {
        player $cmd;
    } elsif ($cmd eq 's') {
        player 'S';
    }
    print STDERR BRIGHT_RED, "rpi.fm> ", RESET;
}
mysave;

sub getstation {
    while (1) {
        (my $gnr = $genre) =~ s/ /%20/g;
        my $page = `curl http://www.internet-radio.com$gnr 2>/dev/null`;
        $page =~ s/&amp;/&/g;
        loadgenres $page unless %genres;
        $page =~ /<h2 style=.+>\s*(.+)<\/h2>/;
        $title = $1;
        @stations = ();
        my ($prev, $next);
        foreach (split(/\n/, $page)) {
            if (m|href="/player/\?mount=(.+/).+?pls&title=(.+?)&website=http://(.+?)">|) {
                push @stations, { listen => $1, title => $2, station => $3 };
            }
            next unless /<ul id="pagination">/;
            $prev = $1 if /<a href="([^>]+)">&laquo; previous</;
            $next = $1 if /<a href="([^>]+)">next &raquo;</;
            last;
        }
        my $i = 0;
        print "$title\n";
        my $ws = ($cols - 4) / 4;
        my $wsf = $cols ? "%-${ws}.${ws}s" : "%s";
        my $wt = ($cols - 4) * 3 / 4;
        my $wtf = $cols ? "%-${wt}.${wt}s" : "%s";
        foreach (@stations) {
            printf "%2d ${wsf} ${wtf}\n", $i, $_->{station}, $_->{title};
            $i++;
        }
        print "<  previous page\n" if $prev;
        print ">  next page\n" if $next;
        my $n;
        while (1) {
            if ($i == 0) {
                return;
            } elsif ($n eq '<' && $prev) {
                $genre = $prev;
                last;
            } elsif ($n eq '>' && $next) {
                $genre = $next;
                last;
            } elsif ($n =~ /\d+/ && $n >= 0 && $n < $i) {
                choosestation $stations[$n];
                return;
            } else {
                print STDERR BRIGHT_RED, "rpi.fm Choose station> ", RESET;
                $n = <>;
                mysave if $n eq '';
                $n =~ s/\n//;
            }
        }
    }
}

sub getgenre {
    loadgenres unless %genres;
    my $i = 0;
    my $columns = $cols / 20 || 1;
    my $format = $columns == 1 ? "%s" : "%-15.15s";
    foreach (sort keys %genres) {
        printf "%3d $format ", $i++, $_;
        print "\n" if $i % $columns == 0;
    }
    print "\n" if $i % $columns != 0;
    my $n;
    while ($n !~ /\d+/ || $n < 0 || $n >= $i) {
        print STDERR BRIGHT_RED, "rpi.fm Choose genre> ", RESET;
        $n = <>;
        mysave if $n eq '';
    }
    my $key = (sort keys %genres)[$n];
    $genre =  $genres{$key};
    getstation;
}

sub loadgenres {
    my $page = shift;
    my @lines = split /\n/, $page || `curl http://www.internet-radio.com 2>/dev/null`;
    foreach (@lines) {
        $genres{$2} = $1 if /<option value="(.+)">(.+)<\/option>/;
    }
}

sub cols {
    return 0 if system "test", "-t", "0";
    my ($rows, $cols) = split /[ \n]/, `/bin/stty size`;
    return $cols;
}

sub mystation {
    print "My Stations\n";
    my $ws = ($cols - 4) / 4;
    my $wsf = $cols ? "%-${ws}.${ws}s" : "%s";
    my $wt = ($cols - 4) * 3 / 4;
    my $wtf = $cols ? "%-${wt}.${wt}s" : "%s";
    @stations = ();
    my $i = 0;
    foreach (sort { $my{$b}{times} <=> $my{$a}{times} } keys %my) {
        $stations[$i] = {
            station => $_,
            listen => $my{$_}{listen},
            title => $my{$_}{title}
        };
        printf "%2d ${wsf} ${wtf}\n", $i, $_, $my{$_}{title};
        $i++;
    }
    my $n;
    while (1) {
        if ($i == 0) {
            return;
        } elsif ($n =~ /\d+/ && $n >= 0 && $n < $i) {
            choosestation $stations[$n];
            return;
        } else {
            print STDERR BRIGHT_RED, "rpi.fm Choose station> ", RESET;
            $n = <>;
            exit 0 if $n eq '';
            $n =~ s/\n//;
        }
    }
}

sub myload {
    open MY, "$ENV{HOME}/.rpi.fm" or return;
    my @lines;
    while (<MY>) {
        push @lines, $_;
    }
    close MY;
    (my $cfg = join "", @lines) =~ s/\n//g;
    # New Dumper format config?
    if ($cfg =~ /^\$VAR1 = {[^;]+};$/) {
        eval $cfg;
        %my = %{$VAR1->{MyStations}};
        %genres = %{$VAR1->{Genres}};
    }
    # Old CSV format config
    else {
        foreach (@lines) {
            next unless /^(.+),(\d+),(.+?),(.+)/;
            $my{$1} = { times => $2, listen => $3, title => $4 };
        }
    }
}

sub mysave {
    loadgenres;
    my $cfgfile = $ENV{HOME} ? "$ENV{HOME}/.rpi.fm" : ".rpi.fm";
    open MY, ">$cfgfile" or die;
    $Data::Dumper::Indent = 1;
    print MY Dumper({ MyStations => \%my, Genres => \%genres });
    close MY;
    exit 0;
}

sub choosestation {
    my %choice = %{$_[0]};
    my $station = $choice{station};
    if ($my{$station}) {
        $my{$station}{times}++;
        $my{$station}{listen} = $choice{listen};
        $my{$station}{title} = $choice{title};
    } else {
        $my{$station} = {
            times => 1,
            listen => $choice{listen},
            title => $choice{title}
        };
    }
    $station_now = $choice{listen};
}

sub player {
    return unless $_[0]; # Don't start another daemon for heaven's sake!
    system "omxd", @_;
}

sub logger {
    open LOG, ">>rpi.fm.log" or return;
    my $msg = shift;
    print LOG time(), " PID:$$ ", $msg, "\n";
    close LOG;
}
