#!/usr/bin/perl
use LWP::Simple;
use HTML::Parse;
print <<EOF;
Welcome to rpi.fm
=================
EOF

sub getstation; sub getgenre; sub player;
sub help {
    print <<EOF;
Available commands:
q	Quit				f	Featured stations list
d	Demonize player	and quit	g	choose Genre
?	help				l	List actual stations
h	play on HDMI output		<n>	choose item <n> from list
j	play on stereo Jack output	p	Play/Pause
EOF
}

our @stations;
our @genres;
our $title;
our $station_now;

player;
print "rpi.fm> ";
while (<>) {
    (my $cmd = $_) =~ s/\r|\n//g;
    if      ($cmd eq 'q') {
        player $cmd;
        exit 0;
    } elsif ($cmd eq 'd') {
        exit 0;
    } elsif ($cmd eq '?') {
        help;
    } elsif ($cmd eq 'f') {
        getstation;
    } elsif ($cmd eq 'g') {
        getgenre;
    } elsif ($cmd =~ /[hjp]/) {
        player $cmd;
    }
    print "rpi.fm> ";
}

sub getstation {
    my $page = get "http://www.internet-radio.com/$_[0]";
    $page =~ /<h2 style=.+>\s*(.+)<\/h2>/;
    $title = $1;
    my $doc = parse_html $page;
    my $i = 0;
    print "$title\n";
    foreach (@{$doc->extract_links()}) {
        next unless $_->[0] =~ /^.+mount=(.+pls)&.*&website=(.+)$/;
        my $station = $2;
        my $listen = $1;
        $stations[$i] = $listen;
        print "$i - $station\n";
        $i++;
    }
    my $n;
    while ($n !~ /\d+/ || $n < 0 || $n >= $i) {
        print "rpi.fm> ";
        $n = <>;
    }
    $station_now = $stations[$n];
}

sub player {
    # Load station and output from nowfile
    our $output;
    our $nowfile = "$ENV{HOME}/.rpi.fm.now";
    if (!$station_now && open NOW, $nowfile) {
        ($station_now = <NOW>) =~ s/\n//;
        ($output      = <NOW>) =~ s/\n//;
        close NOW;
    }
    # Load player PID from pidfile
    our $pidfile = '/run/lock/rpi.fm.pid';
    our $player_pid;
    if (!$player_pid && -f $pidfile) {
        open PID, $pidfile or die $!;
        $player_pid = <PID>;
        close PID;
        unlink $pidfile;
        return;
    }
    # Kill actual player upon other command
    if ($player_pid) {
        kill -9, $player_pid;
        wait;
        $player_pid = undef;
        unlink $nowfile if $_[0] ne 'q';
        unlink $pidfile;
        return if $_[0] =~ /[pq]/;
    }
    # Set output
    $output = $_[0] eq 'j' ? '-olocal'
            : $_[0] eq 'h' ? '-ohdmi'
            :                $output;
    # Save station and output into nowfile
    if (open NOW, ">$nowfile") {
        print NOW "$station_now\n";
        print NOW "$output\n";
        close NOW;
    }
    # Parent saves child PID, child execs omxplayer
    $player_pid = fork;
    if ($player_pid) {
        open PID, ">$pidfile" or die $!;
        print PID $player_pid;
        close PID;
    } else {
        setpgrp;
        my $pls = get $station_now;
        my @plslines = split '\n', $pls;
        my $plsfile = pop @plslines;
        my @tokens = split /=/, $plsfile;
        my $file = $tokens[1];
        open STDOUT, ">/dev/null";
        close STDIN;
        exec '/usr/bin/omxplayer', $output, $file;
    }
}
