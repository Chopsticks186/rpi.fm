#!/usr/bin/perl
use LWP::Simple;
use HTML::Parse;
use Term::ANSIColor qw(:constants);
sub getstation; sub getgenre; sub loadgenres; sub player;
sub help {
    print <<EOF;
Available commands:
q	Quit				f	Featured stations list
d	Demonize player	and quit	g	choose Genre
?	help				l	List actual stations
h	play on HDMI output		<n>	choose item <n> from list
j	play on stereo Jack output	p	Play/Pause
EOF
}

if ($ARGV[0] =~ /-h/) {
    help;
    exit 0;
}

print <<EOF;
Welcome to rpi.fm
=================
EOF

our @stations;
our %genres;
our $title;
our $station_now;

player;
print BRIGHT_RED, "rpi.fm> ", RESET;
while (<>) {
    (my $cmd = $_) =~ s/\r|\n//g;
    if      ($cmd eq 'q') {
        player $cmd;
        exit 0;
    } elsif ($cmd eq 'd') {
        exit 0;
    } elsif ($cmd eq '?') {
        help;
    } elsif ($cmd eq 'f') {
        getstation;
    } elsif ($cmd eq 'g') {
        getgenre;
    } elsif ($cmd =~ /[hjp]/) {
        player $cmd;
    }
    print BRIGHT_RED, "rpi.fm> ", RESET;
}

sub getstation {
    my $page = get "http://www.internet-radio.com$_[0]";
    loadgenres $page unless %genres;
    $page =~ /<h2 style=.+>\s*(.+)<\/h2>/;
    $title = $1;
    my $doc = parse_html $page;
    my $i = 0;
    print "$title\n";
    foreach (@{$doc->extract_links()}) {
        next unless $_->[0] =~ /^.+mount=(.+pls)&title=(.+)&website=(.+)$/;
        my ($listen, $title, $station) = ($1, $2, $3);
        $stations[$i] = $listen;
        printf "%2d %-31.31s %-45.45s\n", $i, $station, $title;
        $i++;
    }
    my $n;
    while ($n !~ /\d+/ || $n < 0 || $n >= $i) {
        return if $i == 0;
        print BRIGHT_RED, "rpi.fm Choose station> ", RESET;
        $n = <>;
    }
    $station_now = $stations[$n];
}

sub getgenre {
    loadgenres unless %genres;
    my $i = 0;
    foreach (sort keys %genres) {
        printf "%3d %-15.15s ", $i++, $_;
        print "\n" if $i % 4 == 0;
    }
    print "\n" if $i % 4 != 0;
    my $n;
    while ($n !~ /\d+/ || $n < 0 || $n >= $i) {
        print BRIGHT_RED, "rpi.fm Choose genre> ", RESET;
        $n = <>;
    }
    my $key = (sort keys %genres)[$n];
    getstation $genres{$key};
}

sub loadgenres {
    my @lines = split /\n/, $_[0] || get "http://www.internet-radio.com";
    foreach (@lines) {
        $genres{$2} = $1 if /<option value="(.+)">(.+)<\/option>/;
    }
}

sub player {
    # Load station and output from nowfile
    our $output;
    our $nowfile = "$ENV{HOME}/.rpi.fm.now";
    if (!$station_now && open NOW, $nowfile) {
        ($station_now = <NOW>) =~ s/\n//;
        ($output      = <NOW>) =~ s/\n//;
        close NOW;
    }
    # Load player PID from pidfile
    our $pidfile = '/run/lock/rpi.fm.pid';
    our $player_pid;
    if (!$player_pid && -f $pidfile) {
        open PID, $pidfile or die $!;
        $player_pid = <PID>;
        close PID;
        return;
    }
    # Kill actual player upon other command
    if ($player_pid) {
        kill TERM => -$player_pid;
        wait;
        $player_pid = undef;
        unlink $nowfile if $_[0] ne 'q';
        unlink $pidfile;
        return if $_[0] eq 'p';
    }
    return if $_[0] eq 'q';
    # Save station and output into nowfile
    $output = $_[0] eq 'j' ? '-olocal' : $_[0] eq 'h' ? '-ohdmi' : $output;
    if (open NOW, ">$nowfile") {
        print NOW "$station_now\n";
        print NOW "$output\n";
        close NOW;
    }
    # Parent saves child PID, child execs omxplayer
    $player_pid = fork;
    if ($player_pid) {
        open PID, ">$pidfile" or die $!;
        print PID $player_pid;
        close PID;
    } else {
        my $file = (split /=|\n/, get($station_now))[-1];
        setpgrp;
        open STDOUT, ">/dev/null";
        close STDIN;
        exec '/usr/bin/omxplayer', $output, $file;
    }
}
